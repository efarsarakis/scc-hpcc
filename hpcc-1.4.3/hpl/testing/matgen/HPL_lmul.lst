%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /fs3/d59/d59/s1361615/isc14/scc-hpcc/hpcc-1.4.3/hpl/lib/arch/build/../../../testing/matgen/HPL_lmul.c
Compiled : 2014-03-24  21:33:55
Compiler : Version 8.2.x.x
Ftnlx    : Version 8232 (libcif 82024)
Target   : x86-64
Command  : driver.cc -h cpu=ivybridge -h static -h network=aries
           -o ../../../testing/matgen/HPL_lmul.o
           -c ../../../testing/matgen/HPL_lmul.c -I ../../../include
           -I ../../../include/CrayX1 -D Add_ -D StringSunStyle
           -D F77_INTEGER=int -O 2 -h list=m -D LONG_IS_64BITS -h restrict=a
           -ibase-compiler /opt/cray/cce/8.2.1/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.2.1/craylibs/x86-64/include
           -I /opt/gcc/4.4.4/snos/lib/gcc/x86_64-suse-linux/4.4.4/include
           -I /opt/gcc/4.4.4/snos/lib/gcc/x86_64-suse-linux/4.4.4/include-fixed
           -L /opt/cray/cce/8.2.1/CC/x86-64/lib/x86-64
           -W l,-rpath=/opt/cray/cce/8.2.1/CC/x86-64/lib/x86-64
           -L /opt/gcc/4.4.4/snos/lib64 -W l,-rpath=/opt/gcc/4.4.4/snos/lib64
           -L /opt/cray/cce/8.2.1/craylibs/x86-64
           -W l,-rpath=/opt/cray/cce/8.2.1/craylibs/x86-64 -lcraymath
           -lquadmath -lcraymp
           -I /opt/cray/rca/1.0.0-2.0500.41336.1.120.ari/include
           -I /opt/cray/alps/5.0.3-2.0500.8095.1.1.ari/include
           -I /opt/cray/xpmem/0.1-2.0500.41356.1.11.ari/include
           -I /opt/cray/gni-headers/3.0-1.0500.7161.11.4.ari/include
           -I /opt/cray/dmapp/6.0.1-1.0500.7263.9.31.ari/include
           -I /opt/cray/pmi/4.0.1-1.0000.9753.86.2.ari/include
           -I /opt/cray/ugni/5.0-1.0500.0.3.306.ari/include
           -I /opt/cray/udreg/2.3.2-1.0500.6756.2.10.ari/include
           -I /opt/cray-hss-devel/7.0.0/include
           -I /opt/cray/krca/1.0.0-2.0500.41867.2.75.ari/include
           -L /opt/cray/rca/1.0.0-2.0500.41336.1.120.ari/lib64
           -L /opt/cray/alps/5.0.3-2.0500.8095.1.1.ari/lib64
           -L /opt/cray/xpmem/0.1-2.0500.41356.1.11.ari/lib64
           -L /opt/cray/dmapp/6.0.1-1.0500.7263.9.31.ari/lib64
           -L /opt/cray/pmi/4.0.1-1.0000.9753.86.2.ari/lib64
           -L /opt/cray/ugni/5.0-1.0500.0.3.306.ari/lib64
           -L /opt/cray/udreg/2.3.2-1.0500.6756.2.10.ari/lib64
           -I /opt/cray/mpt/6.1.1/gni/mpich2-cray/81/include
           -I /opt/cray/libsci/12.1.2/CRAY/81/sandybridge/include
           -I /opt/fftw/3.3.0.4/sandybridge/include
           -I /opt/cray/rca/1.0.0-2.0500.41336.1.120.ari/include
           -I /opt/cray/alps/5.0.3-2.0500.8095.1.1.ari/include
           -I /opt/cray/xpmem/0.1-2.0500.41356.1.11.ari/include
           -I /opt/cray/gni-headers/3.0-1.0500.7161.11.4.ari/include
           -I /opt/cray/dmapp/6.0.1-1.0500.7263.9.31.ari/include
           -I /opt/cray/pmi/4.0.1-1.0000.9753.86.2.ari/include
           -I /opt/cray/ugni/5.0-1.0500.0.3.306.ari/include
           -I /opt/cray/udreg/2.3.2-1.0500.6756.2.10.ari/include
           -I /opt/cray-hss-devel/7.0.0/include
           -I /opt/cray/krca/1.0.0-2.0500.41867.2.75.ari/include

clx report
------------
Source   : /fs3/d59/d59/s1361615/isc14/scc-hpcc/hpcc-1.4.3/hpl/lib/arch/build/../../../testing/matgen/HPL_lmul.c
Date     : 03/24/2014  21:33:57


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned               f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.           /* 
    2.            * -- High Performance Computing Linpack Benchmark (HPL)                
    3.            *    HPL - 2.0 - September 10, 2008                          
    4.            *    Antoine P. Petitet                                                
    5.            *    University of Tennessee, Knoxville                                
    6.            *    Innovative Computing Laboratory                                 
    7.            *    (C) Copyright 2000-2008 All Rights Reserved                       
    8.            *                                                                      
    9.            * -- Copyright notice and Licensing terms:                             
   10.            *                                                                      
   11.            * Redistribution  and  use in  source and binary forms, with or without
   12.            * modification, are  permitted provided  that the following  conditions
   13.            * are met:                                                             
   14.            *                                                                      
   15.            * 1. Redistributions  of  source  code  must retain the above copyright
   16.            * notice, this list of conditions and the following disclaimer.        
   17.            *                                                                      
   18.            * 2. Redistributions in binary form must reproduce  the above copyright
   19.            * notice, this list of conditions,  and the following disclaimer in the
   20.            * documentation and/or other materials provided with the distribution. 
   21.            *                                                                      
   22.            * 3. All  advertising  materials  mentioning  features  or  use of this
   23.            * software must display the following acknowledgement:                 
   24.            * This  product  includes  software  developed  at  the  University  of
   25.            * Tennessee, Knoxville, Innovative Computing Laboratory.             
   26.            *                                                                      
   27.            * 4. The name of the  University,  the name of the  Laboratory,  or the
   28.            * names  of  its  contributors  may  not  be used to endorse or promote
   29.            * products  derived   from   this  software  without  specific  written
   30.            * permission.                                                          
   31.            *                                                                      
   32.            * -- Disclaimer:                                                       
   33.            *                                                                      
   34.            * THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   35.            * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
   36.            * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   37.            * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
   38.            * OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
   39.            * SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
   40.            * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   41.            * DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
   42.            * THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
   43.            * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   44.            * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
   45.            * ---------------------------------------------------------------------
   46.            */ 
   47.           /*
   48.            * Include files
   49.            */
   50.           #include "hpl.h"
   51.           
   52.           #ifdef STDC_HEADERS
   53.           void HPL_lmul
   54.           (
   55.              int *                            K,
   56.              int *                            J,
   57.              int *                            I
   58.           )
   59.           #else
   60.           void HPL_lmul
   61.           ( K, J, I )
   62.              int *                            K;
   63.              int *                            J;
   64.              int *                            I;
   65.           #endif
   66.           {
   67.           /* 
   68.            * Purpose
   69.            * =======
   70.            *
   71.            * HPL_lmul multiplies  without carry two long positive integers K and J
   72.            * and puts the result into I. The long integers  I, J, K are encoded on
   73.            * 64 bits using an array of 2 integers. The 32-lower bits are stored in
   74.            * the first entry of each array, the 32-higher bits in the second entry
   75.            * of each array. For efficiency purposes, the  intrisic modulo function
   76.            * is inlined.
   77.            *
   78.            * Arguments
   79.            * =========
   80.            *
   81.            * K       (local input)                 int *
   82.            *         On entry, K is an integer array of dimension 2 containing the
   83.            *         encoded long integer K.
   84.            *
   85.            * J       (local input)                 int *
   86.            *         On entry, J is an integer array of dimension 2 containing the
   87.            *         encoded long integer J.
   88.            *
   89.            * I       (local output)                int *
   90.            *         On entry, I is an integer array of dimension 2. On exit, this
   91.            *         array contains the encoded long integer result.
   92.            *
   93.            * ---------------------------------------------------------------------
   94.            */ 
   95.           /*
   96.            * .. Local Variables ..
   97.            */
   98.              int                        r, c;
   99.              unsigned int               kk[4], jj[4], res[5];
  100.           /* ..
  101.            * .. Executable Statements ..
  102.            */
  103.           /*
  104.            * Addition is done with 16 bits at a time. Multiplying two 16-bit
  105.            * integers yields a 32-bit result. The lower 16-bits of the result
  106.            * are kept in I, and the higher 16-bits are carried over to the
  107.            * next multiplication.
  108.            */
  109.  + w----<    for (c = 0; c < 2; ++c) {
  110.    w           kk[2*c] = K[c] & 65535;
  111.    w           kk[2*c+1] = ((unsigned)K[c] >> 16) & 65535;
  112.    w           jj[2*c] = J[c] & 65535;
  113.    w           jj[2*c+1] = ((unsigned)J[c] >> 16) & 65535;
  114.    w---->    }
  115.           
  116.              res[0] = 0;
  117.  + w----<    for (c = 0; c < 4; ++c) {
  118.    w           res[c+1] = (res[c] >> 16) & 65535;
  119.    w           res[c] &= 65535;
  120.    w w--<      for (r = 0; r < c+1; ++r) {
  121.    w w           res[c] = kk[r] * jj[c-r] + (res[c] & 65535);
  122.    w w           res[c+1] += (res[c] >> 16) & 65535;
  123.    w w-->      }
  124.    w---->    }
  125.           
  126.  + w----<    for (c = 0; c < 2; ++c)
  127.    w---->      I[c] = (int)(((res[2*c+1] & 65535) << 16) | (res[2*c] & 65535));
  128.           /*
  129.            * End of HPL_lmul
  130.            */
  131.           }

CC-6271 CC: VECTOR File = HPL_lmul.c, Line = 109 
  A loop was not vectorized because its trip count is too small.

CC-6008 CC: SCALAR File = HPL_lmul.c, Line = 109 
  A loop was unwound.

CC-6306 CC: VECTOR File = HPL_lmul.c, Line = 117 
  A loop was not vectorized because the iteration space is too irregular.

CC-6008 CC: SCALAR File = HPL_lmul.c, Line = 117 
  A loop was unwound.

CC-6008 CC: SCALAR File = HPL_lmul.c, Line = 120 
  A loop was unwound.

CC-6271 CC: VECTOR File = HPL_lmul.c, Line = 126 
  A loop was not vectorized because its trip count is too small.

CC-6008 CC: SCALAR File = HPL_lmul.c, Line = 126 
  A loop was unwound.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
