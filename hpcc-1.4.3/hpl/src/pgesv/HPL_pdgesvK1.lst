%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /fs3/d59/d59/s1361615/isc14/scc-hpcc/hpcc-1.4.3/hpl/lib/arch/build/../../../src/pgesv/HPL_pdgesvK1.c
Compiled : 2014-03-24  21:33:45
Compiler : Version 8.2.x.x
Ftnlx    : Version 8232 (libcif 82024)
Target   : x86-64
Command  : driver.cc -h cpu=ivybridge -h static -h network=aries
           -o ../../../src/pgesv/HPL_pdgesvK1.o
           -c ../../../src/pgesv/HPL_pdgesvK1.c -I ../../../include
           -I ../../../include/CrayX1 -D Add_ -D StringSunStyle
           -D F77_INTEGER=int -O 2 -h list=m -D LONG_IS_64BITS -h restrict=a
           -ibase-compiler /opt/cray/cce/8.2.1/CC/x86-64/compiler_include_base
           -isystem /opt/cray/cce/8.2.1/craylibs/x86-64/include
           -I /opt/gcc/4.4.4/snos/lib/gcc/x86_64-suse-linux/4.4.4/include
           -I /opt/gcc/4.4.4/snos/lib/gcc/x86_64-suse-linux/4.4.4/include-fixed
           -L /opt/cray/cce/8.2.1/CC/x86-64/lib/x86-64
           -W l,-rpath=/opt/cray/cce/8.2.1/CC/x86-64/lib/x86-64
           -L /opt/gcc/4.4.4/snos/lib64 -W l,-rpath=/opt/gcc/4.4.4/snos/lib64
           -L /opt/cray/cce/8.2.1/craylibs/x86-64
           -W l,-rpath=/opt/cray/cce/8.2.1/craylibs/x86-64 -lcraymath
           -lquadmath -lcraymp
           -I /opt/cray/rca/1.0.0-2.0500.41336.1.120.ari/include
           -I /opt/cray/alps/5.0.3-2.0500.8095.1.1.ari/include
           -I /opt/cray/xpmem/0.1-2.0500.41356.1.11.ari/include
           -I /opt/cray/gni-headers/3.0-1.0500.7161.11.4.ari/include
           -I /opt/cray/dmapp/6.0.1-1.0500.7263.9.31.ari/include
           -I /opt/cray/pmi/4.0.1-1.0000.9753.86.2.ari/include
           -I /opt/cray/ugni/5.0-1.0500.0.3.306.ari/include
           -I /opt/cray/udreg/2.3.2-1.0500.6756.2.10.ari/include
           -I /opt/cray-hss-devel/7.0.0/include
           -I /opt/cray/krca/1.0.0-2.0500.41867.2.75.ari/include
           -L /opt/cray/rca/1.0.0-2.0500.41336.1.120.ari/lib64
           -L /opt/cray/alps/5.0.3-2.0500.8095.1.1.ari/lib64
           -L /opt/cray/xpmem/0.1-2.0500.41356.1.11.ari/lib64
           -L /opt/cray/dmapp/6.0.1-1.0500.7263.9.31.ari/lib64
           -L /opt/cray/pmi/4.0.1-1.0000.9753.86.2.ari/lib64
           -L /opt/cray/ugni/5.0-1.0500.0.3.306.ari/lib64
           -L /opt/cray/udreg/2.3.2-1.0500.6756.2.10.ari/lib64
           -I /opt/cray/mpt/6.1.1/gni/mpich2-cray/81/include
           -I /opt/cray/libsci/12.1.2/CRAY/81/sandybridge/include
           -I /opt/fftw/3.3.0.4/sandybridge/include
           -I /opt/cray/rca/1.0.0-2.0500.41336.1.120.ari/include
           -I /opt/cray/alps/5.0.3-2.0500.8095.1.1.ari/include
           -I /opt/cray/xpmem/0.1-2.0500.41356.1.11.ari/include
           -I /opt/cray/gni-headers/3.0-1.0500.7161.11.4.ari/include
           -I /opt/cray/dmapp/6.0.1-1.0500.7263.9.31.ari/include
           -I /opt/cray/pmi/4.0.1-1.0000.9753.86.2.ari/include
           -I /opt/cray/ugni/5.0-1.0500.0.3.306.ari/include
           -I /opt/cray/udreg/2.3.2-1.0500.6756.2.10.ari/include
           -I /opt/cray-hss-devel/7.0.0/include
           -I /opt/cray/krca/1.0.0-2.0500.41867.2.75.ari/include

clx report
------------
Source   : /fs3/d59/d59/s1361615/isc14/scc-hpcc/hpcc-1.4.3/hpl/lib/arch/build/../../../src/pgesv/HPL_pdgesvK1.c
Date     : 03/24/2014  21:33:45


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted               
     E - Cloned               f - fused
     G - Accelerated          g - partitioned
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
                              n - non-blocking remote transfer
                              p - partial
                              r - unrolled
                              s - shortloop
     V - Vectorized           w - unwound

     + - More messages listed at end of listing
     ------------------------------------------


    1.              /* 
    2.               * -- High Performance Computing Linpack Benchmark (HPL)                
    3.               *    HPL - 2.0 - September 10, 2008                          
    4.               *    Antoine P. Petitet                                                
    5.               *    University of Tennessee, Knoxville                                
    6.               *    Innovative Computing Laboratory                                 
    7.               *    (C) Copyright 2000-2008 All Rights Reserved                       
    8.               *                                                                      
    9.               * -- Copyright notice and Licensing terms:                             
   10.               *                                                                      
   11.               * Redistribution  and  use in  source and binary forms, with or without
   12.               * modification, are  permitted provided  that the following  conditions
   13.               * are met:                                                             
   14.               *                                                                      
   15.               * 1. Redistributions  of  source  code  must retain the above copyright
   16.               * notice, this list of conditions and the following disclaimer.        
   17.               *                                                                      
   18.               * 2. Redistributions in binary form must reproduce  the above copyright
   19.               * notice, this list of conditions,  and the following disclaimer in the
   20.               * documentation and/or other materials provided with the distribution. 
   21.               *                                                                      
   22.               * 3. All  advertising  materials  mentioning  features  or  use of this
   23.               * software must display the following acknowledgement:                 
   24.               * This  product  includes  software  developed  at  the  University  of
   25.               * Tennessee, Knoxville, Innovative Computing Laboratory.             
   26.               *                                                                      
   27.               * 4. The name of the  University,  the name of the  Laboratory,  or the
   28.               * names  of  its  contributors  may  not  be used to endorse or promote
   29.               * products  derived   from   this  software  without  specific  written
   30.               * permission.                                                          
   31.               *                                                                      
   32.               * -- Disclaimer:                                                       
   33.               *                                                                      
   34.               * THIS  SOFTWARE  IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
   35.               * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  INCLUDING,  BUT NOT
   36.               * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
   37.               * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE UNIVERSITY
   38.               * OR  CONTRIBUTORS  BE  LIABLE FOR ANY  DIRECT,  INDIRECT,  INCIDENTAL,
   39.               * SPECIAL,  EXEMPLARY,  OR  CONSEQUENTIAL DAMAGES  (INCLUDING,  BUT NOT
   40.               * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   41.               * DATA OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER CAUSED AND ON ANY
   42.               * THEORY OF LIABILITY, WHETHER IN CONTRACT,  STRICT LIABILITY,  OR TORT
   43.               * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
   44.               * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
   45.               * ---------------------------------------------------------------------
   46.               */ 
   47.              /*
   48.               * Include files
   49.               */
   50.              #include "hpl.h"
   51.               
   52.              #ifdef HPL_STDC_HEADERS
   53.              void HPL_pdgesvK1
   54.              (
   55.                 HPL_T_grid *                     GRID,
   56.                 HPL_T_palg *                     ALGO,
   57.                 HPL_T_pmat *                     A
   58.              )
   59.              #else
   60.              void HPL_pdgesvK1
   61.              ( GRID, ALGO, A )
   62.                 HPL_T_grid *                     GRID;
   63.                 HPL_T_palg *                     ALGO;
   64.                 HPL_T_pmat *                     A;
   65.              #endif
   66.              {
   67.              /* 
   68.               * Purpose
   69.               * =======
   70.               *
   71.               * HPL_pdgesvK1 factors a N+1-by-N matrix using LU factorization with row
   72.               * partial pivoting.  The main algorithm  is the "right looking" variant
   73.               * with look-ahead.  The  lower  triangular factor is left unpivoted and
   74.               * the pivots are not returned. The right hand side is the N+1 column of
   75.               * the coefficient matrix.
   76.               *
   77.               * Arguments
   78.               * =========
   79.               *
   80.               * GRID    (local input)                 HPL_T_grid *
   81.               *         On entry,  GRID  points  to the data structure containing the
   82.               *         process grid information.
   83.               *
   84.               * ALGO    (global input)                HPL_T_palg *
   85.               *         On entry,  ALGO  points to  the data structure containing the
   86.               *         algorithmic parameters.
   87.               *
   88.               * A       (local input/output)          HPL_T_pmat *
   89.               *         On entry, A points to the data structure containing the local
   90.               *         array information.
   91.               *
   92.               * ---------------------------------------------------------------------
   93.               */ 
   94.              /*
   95.               * .. Local Variables ..
   96.               */
   97.                 HPL_T_panel                * * panel = NULL;
   98.                 HPL_T_UPD_FUN              HPL_pdupdate;
   99.                 int                        N, depth, icurcol=0, j, jb, jj=0, jstart,
  100.                                            k, mycol, n, nb, nn, npcol, nq,
  101.                                            tag=MSGID_BEGIN_FACT, test=HPL_KEEP_TESTING;
  102.              /* ..
  103.               * .. Executable Statements ..
  104.               */
  105.                 mycol = GRID->mycol; npcol        = GRID->npcol;
  106.                 depth = ALGO->depth; HPL_pdupdate = ALGO->upfun;
  107.                 N     = A->n;        nb           = A->nb; 
  108.              
  109.                 if( N <= 0 ) return;
  110.              /*
  111.               * Allocate a panel list of length depth + 1 (depth >= 1)
  112.               */
  113.                 panel = (HPL_T_panel **)malloc( (size_t)(depth+1)*sizeof( HPL_T_panel *) );
  114.                 if( panel == NULL )
  115.  +              { HPL_pabort( __LINE__, "HPL_pdgesvK1", "Memory allocation failed" ); }
  116.              /*
  117.               * Create and initialize the first depth panels
  118.               */
  119.  +              nq = HPL_numroc( N+1, nb, nb, mycol, 0, npcol ); nn = N; jstart = 0;
  120.              
  121.  + 1-------<    for( k = 0; k < depth; k++ )
  122.    1            {
  123.    1               jb = Mmin( nn, nb );
  124.  + 1               HPL_pdpanel_new( GRID, ALGO, nn, nn+1, jb, A, jstart, jstart,
  125.    1                                tag, &panel[k] );
  126.    1               nn -= jb; jstart += jb;
  127.    1               if( mycol == icurcol ) { jj += jb; nq -= jb; }
  128.    1               icurcol = MModAdd1( icurcol, npcol );
  129.    1               tag     = MNxtMgid( tag, MSGID_BEGIN_FACT, MSGID_END_FACT );
  130.    1------->    }
  131.              /*
  132.               * Initialize the lookahead - Factor jstart columns: panel[0..depth-1]
  133.               */
  134.  + 1-------<    for( k = 0, j = 0; k < depth; k++ )
  135.    1            {
  136.    1               jb = jstart - j; jb = Mmin( jb, nb ); j += jb;
  137.    1         /*
  138.    1          * Factor and broadcast k-th panel - use long topology for those
  139.    1          */
  140.  + 1               HPL_pdfact(         panel[k] );
  141.  + 1               (void) HPL_binit(   panel[k] );
  142.  + 1 2-----<       do
  143.  + 1 2             { (void) HPL_bcast( panel[k], &test ); }
  144.    1 2----->       while( test != HPL_SUCCESS );
  145.  + 1               (void) HPL_bwait(   panel[k] );
  146.    1         /*
  147.    1          * Partial update of the depth-1-k panels in front of me
  148.    1          */
  149.    1               if( k < depth - 1 )
  150.    1               {
  151.  + 1                  nn = HPL_numrocI( jstart-j, j, nb, nb, mycol, 0, npcol );
  152.  + 1                  HPL_pdupdate( NULL, NULL, panel[k], nn );
  153.    1               }
  154.    1------->    }
  155.              /*
  156.               * Main loop over the remaining columns of A
  157.               */
  158.  + 1-------<    for( j = jstart; j < N; j += nb )
  159.    1            {
  160.    1               n = N - j; jb = Mmin( n, nb );
  161.    1         /*
  162.    1          * Allocate current panel resources - Finish latest update - Factor and
  163.    1          * broadcast current panel
  164.    1          */
  165.  + 1               HPL_pdpanel_new( GRID, ALGO, n, n+1, jb, A, j, j, tag, &panel[depth] );
  166.    1          
  167.    1               if( mycol == icurcol )
  168.    1               {
  169.  + 1                  nn = HPL_numrocI( jb, j, nb, nb, mycol, 0, npcol );
  170.  + 1 2-----<          for( k = 0; k < depth; k++ )   /* partial updates 0..depth-1 */
  171.  + 1 2 ---->             HPL_pdupdate( NULL, NULL, panel[k], nn );
  172.  + 1                  HPL_pdfact(    panel[depth] );       /* factor current panel */
  173.    1               }
  174.    1               else { nn = 0; }
  175.    1                   /* Finish the latest update and broadcast the current panel */
  176.  + 1               (void) HPL_binit( panel[depth] );
  177.  + 1               HPL_pdupdate(     panel[depth], &test, panel[0], nq-nn );
  178.  + 1               (void) HPL_bwait( panel[depth] );
  179.    1         /*
  180.    1          * Release latest panel resources - circular  of the panel pointers
  181.    1          * Go to the next process row and column -  update  the message ids  for
  182.    1          * broadcast
  183.    1          */
  184.  + 1               (void) HPL_pdpanel_disp( &panel[0] );
  185.    1 Vr2--<>       for( k = 0; k < depth; k++ ) panel[k] = panel[k+1];
  186.    1          
  187.    1               if( mycol == icurcol ) { jj += jb; nq -= jb; }
  188.    1               icurcol = MModAdd1( icurcol, npcol );
  189.    1               tag     = MNxtMgid( tag, MSGID_BEGIN_FACT, MSGID_END_FACT );
  190.    1------->    }
  191.              /*
  192.               * Clean-up: Finish updates - release panels and panel list
  193.               */
  194.  +              nn = HPL_numrocI( 1, N, nb, nb, mycol, 0, npcol );
  195.  + 1-------<    for( k = 0; k < depth; k++ )
  196.    1            {
  197.  + 1               HPL_pdupdate( NULL, NULL, panel[k], nn );
  198.  + 1               (void) HPL_pdpanel_disp( &panel[k] );
  199.    1------->    }
  200.               
  201.                 if( panel ) free( panel );
  202.              /*
  203.               * End of HPL_pdgesvK1
  204.               */
  205.              }

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 115 
  "HPL_pabort" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 119 
  "HPL_numroc" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-6287 CC: VECTOR File = HPL_pdgesvK1.c, Line = 121 
  A loop was not vectorized because it contains a call to function "HPL_pdpanel_new" on line 124.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 124 
  "HPL_pdpanel_new" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-6287 CC: VECTOR File = HPL_pdgesvK1.c, Line = 134 
  A loop was not vectorized because it contains a call to function "HPL_pdfact" on line 140.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 140 
  "HPL_pdfact" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 141 
  "HPL_binit" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-6287 CC: VECTOR File = HPL_pdgesvK1.c, Line = 142 
  A loop was not vectorized because it contains a call to function "HPL_bcast" on line 143.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 143 
  "HPL_bcast" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 145 
  "HPL_bwait" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 151 
  "HPL_numrocI" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 152 
  "HPL_pdupdate" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-6287 CC: VECTOR File = HPL_pdgesvK1.c, Line = 158 
  A loop was not vectorized because it contains a call to function "HPL_pdpanel_new" on line 165.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 165 
  "HPL_pdpanel_new" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 169 
  "HPL_numrocI" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-6287 CC: VECTOR File = HPL_pdgesvK1.c, Line = 170 
  A loop was not vectorized because it contains a call to function "HPL_pdupdate" on line 171.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 171 
  "HPL_pdupdate" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 172 
  "HPL_pdfact" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 176 
  "HPL_binit" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 177 
  "HPL_pdupdate" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 178 
  "HPL_bwait" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 184 
  "HPL_pdpanel_disp" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-6005 CC: SCALAR File = HPL_pdgesvK1.c, Line = 185 
  A loop was unrolled 2 times.

CC-6204 CC: VECTOR File = HPL_pdgesvK1.c, Line = 185 
  A loop was vectorized.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 194 
  "HPL_numrocI" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-6287 CC: VECTOR File = HPL_pdgesvK1.c, Line = 195 
  A loop was not vectorized because it contains a call to function "HPL_pdupdate" on line 197.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 197 
  "HPL_pdupdate" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.

CC-3021 CC: IPA File = HPL_pdgesvK1.c, Line = 198 
  "HPL_pdpanel_disp" (called from "HPL_pdgesvK1") was not inlined because the compiler was unable to locate the routine.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
